---
title: "Unravel: A fluent code explorer for R"
date: "2022-08-17"
categories: [Unravel, tools]
image: UnravelGestalt.jpg
---

<img src="UnravelGestalt.jpg" alt="A gestalt art of Unravel" width="100%"/>

# Motivation

During my fifth to sixth year in PhD, I was left wondering what I wanted to build to round off my dissertation. I knew I wanted to do something exciting, and had been exploring several tools around comprehending data science code and output. For example, I've always been super appreciative of tools like [Python Tutor](https://pythontutor.com) that helps beginners in Python step through code forwards and backwards, watch how variables are populated, and even show how functions are called. What attracted me most about this was the magic of _time travel debugging_, a technique where you replay the events of the program to help you debug issues. Try clicking 'Next' and 'Prev' to move forwards and backwards on this simple example here:

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=def%20foo%28%29%3A%0A%20%20%20%20print%28%22there%22%29%0A%20%20%20%20%0Adef%20bar%28%29%3A%0A%20%20%20%20print%28%22hi%22%29%0A%20%20%20%20foo%28%29%0A%20%20%20%20%0Abar%28%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

I liked this tool so much I wanted it for understanding and tracing transformations within a [`{dplyr}`](https://dplyr.tidyverse.org) pipe chain like this one:

```r
starwars %>%
  group_by(species) %>%
  summarise(
    n = n(),
    mass = mean(mass, na.rm = TRUE)
  ) %>%
  filter(
    n > 1,
    mass > 50
  )
```

The code above uses a design pattern called [_the fluent API_](https://martinfowler.com/bliki/FluentInterface.html), a way of writing domain specific code where typically you build up operations by chaining them together (dot notation or pipes `%>%`. The code also has "structure", each line of the code are steps, and the order of these steps can matter since we're building up transformations to produce some meaningful output like summary stats of different starwar species and their average mass. The problem is that although we have nice legibility, it's harder to trace what happens at each step and how data was transformed.

I initially built a web app using the [`{shiny}`](https://shiny.rstudio.com) just like Python Tutor thanks to a neat library called [CodeMirror](https://codemirror.net)---version 5 not the new version 6 which I hear is great. Unfortunately this version is buried somehwere in my directories and I can't reference it here. But, while this was cool and all, there were a lot of missing pieces, more information that is needed beyond just printing the output at each step.

I had a meeting with my advisor Chris and colleage Titus, and we discussed the idea of opening up the exploration and focusing on key information one might want at each step. I did a ton of brainstorming and sketching... like a lot.

<img src="prototyping.png" alt="A screenshot of my google draw file of the prototyping use cases of Unravel" width="100%"/>


# Enter Unravel

[Unravel](https://github.com/nischalshrestha/Unravel) is a project that explores interactive exploration of data science code written in R. Unravel ([paper](http://nischalshrestha.me/docs/unravel.pdf) + [talk](https://www.youtube.com/watch?v=wJ77e39XVEs)), enables data scientists to interactively inspect, understand and explore data wrangling code written using a [fluent API](https://www.martinfowler.com/bliki/FluentInterface.html) like the [tidyverse](https://www.tidyverse.org).

(more to come!)
